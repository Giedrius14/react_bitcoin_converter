{"version":3,"sources":["components/PriceCardComponent/PriceCardComponent.tsx","components/BitcoinConverterComponent/BitcoinConverterComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/BitcoinConverterComponent/BitcoinConverterComponent.module.scss","components/PriceCardComponent/PriceCardComponent.module.scss"],"names":["PriceCardComponent","currency","onClick","value","Card","className","styles","CardHeader","avatar","cardAvatar","src","toLowerCase","flag","alt","cardTitle","action","IconButton","CardContent","currencyValue","locale","style","BitcoinConverterComponent","useState","bitcoinAmount","setBitcoinAmount","priceData","setPriceData","displayedCurrencies","setDisplayedCurrencies","bitcoinAmountError","isNaN","showCurrencySelect","length","useEffect","interval","fetchPrices","a","fetch","res","json","data","bpi","setInterval","clearInterval","convertBTCtoCurrency","rate_float","inputContainer","FormControl","TextField","id","label","onChange","event","target","error","helperText","currencySelector","InputLabel","Select","inputProps","defaultValue","text","map","item","idx","MenuItem","disabled","includes","currencyCardContainer","currencyToRemove","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.97a4e7d9.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './PriceCardComponent.module.scss';\nimport {Card, CardContent, CardHeader, IconButton} from '@material-ui/core';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport {FormattedNumber, IntlProvider} from 'react-intl';\n\nconst PriceCardComponent = ({currency, onClick, value}: {currency: string, onClick: () => void, value: number}) => {\n  return (\n      <Card className={styles.PriceCardComponent} data-testid=\"PriceCardComponent\">\n        <CardHeader avatar={\n                      <div className={styles.cardAvatar}>\n                        <img src={`https://static.coindesk.com/static/svgs/${currency.toLowerCase()}.svg`}\n                             className={styles.flag}\n                             alt='flag'>\n                        </img>\n                        <div className={styles.cardTitle}>{currency}</div>\n                      </div>\n                    }\n                    action={\n                      <IconButton aria-label=\"Remove currency\" data-testid=\"remove-currency-btn\" onClick={onClick}>\n                        <CancelIcon/>\n                      </IconButton>\n                    }\n        />\n        <CardContent>\n          <div className={styles.currencyValue}>\n            <IntlProvider locale='en'>\n              <FormattedNumber\n                  value={value}\n                  style=\"currency\"\n                  currency={currency}/>\n            </IntlProvider>\n          </div>\n        </CardContent>\n      </Card>);\n};\n\nexport default PriceCardComponent;\n","import React, {useEffect, useState} from 'react';\nimport styles from './BitcoinConverterComponent.module.scss';\nimport {FormControl, InputLabel, MenuItem, Select, TextField} from '@material-ui/core';\nimport {setInterval} from 'timers';\nimport PriceCardComponent from '../PriceCardComponent/PriceCardComponent';\n\nconst BitcoinConverterComponent = () => {\n  const [bitcoinAmount, setBitcoinAmount] = useState(1);\n  const [priceData, setPriceData] = useState(null as any);\n  const [displayedCurrencies, setDisplayedCurrencies] = useState(['USD', 'EUR', 'GBP']);\n\n  const options = [\n    {value: 'USD', text: 'USD'},\n    {value: 'EUR', text: 'EUR'},\n    {value: 'GBP', text: 'GPB'}\n  ];\n\n  const bitcoinAmountError = isNaN(bitcoinAmount);\n  const showCurrencySelect = displayedCurrencies.length !== 3;\n\n  useEffect(() => {\n    let interval: any;\n\n    async function fetchPrices() {\n      const res = await fetch('https://api.coindesk.com/v1/bpi/currentprice.json');\n      const data = await res.json();\n\n      setPriceData(data.bpi);\n    }\n\n    fetchPrices();\n\n    interval = setInterval(() => {\n      fetchPrices();\n    }, 60000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleSelect = (event: any): void => {\n    setDisplayedCurrencies([...displayedCurrencies, event.target.value]);\n  };\n\n  const handleRemoveCurrency = (currencyToRemove: string): void => {\n    setDisplayedCurrencies(displayedCurrencies.filter(currency => currency !== currencyToRemove));\n  };\n\n  const handleBitcoinInput = (event: any): void => {\n    setBitcoinAmount(event.target.value);\n  };\n\n\n  const convertBTCtoCurrency = (currency: string): number => {\n    if(bitcoinAmountError){\n      return 0;\n    }\n\n    return priceData[currency].rate_float * bitcoinAmount;\n  };\n\n  return (\n      <div className={styles.BitcoinConverterComponent} data-testid=\"BitcoinConverterComponent\">\n        <div className={styles.inputContainer}>\n          <FormControl className={styles.bitcoinAmount}>\n            <TextField id=\"bitcoin-input-field\"\n                       label=\"Bitcoin amount\"\n                       value={bitcoinAmount}\n                       onChange={handleBitcoinInput}\n                       error={bitcoinAmountError}\n                       helperText={bitcoinAmountError && 'Please enter numeric values only'}/>\n          </FormControl>\n          {showCurrencySelect &&\n            <FormControl className={styles.currencySelector}>\n              <InputLabel id=\"currency-select-label\">Add Currency</InputLabel>\n              <Select onChange={handleSelect}\n                      inputProps={{ \"data-testid\": \"currency-select-dropdown\" }}\n                      defaultValue={''}>\n                      {\n                        options.map((item, idx) =>\n                            <MenuItem key={idx}\n                                      value={item.value}\n                                      disabled={displayedCurrencies.includes(item.value)}>{item.text}</MenuItem>)\n                      }\n              </Select>\n            </FormControl>\n          }\n        </div>\n\n        <div className={styles.currencyCardContainer}>\n          {priceData && displayedCurrencies.map((currency: string, idx: number) =>\n              <PriceCardComponent key={idx}\n                                  currency={currency}\n                                  onClick={() => handleRemoveCurrency(currency)}\n                                  value={convertBTCtoCurrency(currency)}/>\n          )}\n        </div>\n      </div>\n  );\n};\n\nexport default BitcoinConverterComponent;\n","import React from 'react';\nimport BitcoinConverterComponent from './components/BitcoinConverterComponent/BitcoinConverterComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BitcoinConverterComponent></BitcoinConverterComponent>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BitcoinConverterComponent\":\"BitcoinConverterComponent_BitcoinConverterComponent__2HPPF\",\"inputContainer\":\"BitcoinConverterComponent_inputContainer__2H_Q1\",\"bitcoinAmount\":\"BitcoinConverterComponent_bitcoinAmount__3syJZ\",\"currencySelector\":\"BitcoinConverterComponent_currencySelector__1fTR4\",\"currencyCardContainer\":\"BitcoinConverterComponent_currencyCardContainer__2wAUy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PriceCardComponent\":\"PriceCardComponent_PriceCardComponent__1w0ue\",\"cardAvatar\":\"PriceCardComponent_cardAvatar__3aqMz\",\"cardTitle\":\"PriceCardComponent_cardTitle__6-am3\",\"currencyValue\":\"PriceCardComponent_currencyValue__1PfTS\",\"flag\":\"PriceCardComponent_flag__1JtYp\"};"],"sourceRoot":""}